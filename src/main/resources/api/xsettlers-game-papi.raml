#%RAML 1.0
title: XSettlers Game PAPI
version: 0.1.1

types:
  noteType: !include definitions/noteType.raml
  notebookType: !include definitions/notebookType.raml
  sectorType: !include definitions/sectorType.raml

/note:
  description: a general class for note objects
  post:
    displayName: Create a Note
    description: Initiate a note and place it in the Object store
    body:
      application/json:
        type: noteType
        examples:
          input: !include /examples/noteExample.raml
    responses:
      201:
        body:
          application/json:
            type: noteType
            examples:
              output: !include examples/noteExample.raml
  
  /{ID}:
    description: a single note, identified by key
    get:
      displayName: Retrieve a Note
      description: retrieve indicated note
      responses:
        200:
          body:
            application/json:
              type: noteType
              examples:
                output: !include examples/noteExample.raml
    put:
      displayName: Update a Note
      description: overwrite note in store
      body:
        application/json:
          type: noteType
          examples:
            output: !include examples/noteExample.raml
      responses:
        200:
          body:
            application/json:
              example:
                message: key-of-updated-object
    delete:
      displayName: Remove a Note
      description: remove indicated note from store
      responses:
        200:
          body:
            application/json:
              example:
                message: note deleted from storage

/notebook:
  post:
    displayName: Create a Notebook
    description: add a new notebook to the object store
    body:
      application/json:
        type: notebookType
        examples:
          input: !include examples/notebookExample.json
        
  /{ID}:
    description: a notebook identified by key
    get:
      description: return a notebook
      displayName: Get Notebook
      responses:
        200:
          body:
            application/json:
              type: noteType
    patch:
      displayName: Update Notebook
      description: update notebook with pages supplied in patch - overwrite if needed # needs update to proper example
      responses:
        200:
          body:
            application/json:
              type: notebookType
              examples:
                output: !include examples/notebookExample.json
                
    delete:
      displayName: Remove a Notebook
      description: delete a notebook from the Object store
      responses:
        200:
          body:
            application/json:
              example:
                notebook-key: notebook-20200511-8475

/sector:
  description: One region of space designed in the game
  get:
    description: initialize a new sector (I'm not convinced about this - just one sector?)
    responses:
      200:
        body:
          application/json:
            type: sectorType
            examples:
              output: !include examples/sectorExample.json
  /{ID}:
    description: a region defined by the key in ID
    get:
      responses:
        200:
          body:
            application/json:
              examples:
                output: !include examples/sectorExample.json
    delete:
      responses:
        200:
          body:
            application/json:
              examples:
                output: !include examples/sectorExample.json
    put:
      body:
        application/json:
          examples:
            output: !include examples/sectorExample.json

/region:
  description: a collection of sectors, 16 to a side 
  get:
    description: retrieve a region of sectors
    responses:
      200:
        body:
          application/json:
            type: sectorType[]
            examples:
              output: !include examples/sectorsExample.json
  post:
    description: initialize a region of sectors
    responses:
      201:
        body:
          application/json:
            type: sectorType
            examples:
              output: !include examples/sectorExample.json
          
/ship:
  /{ID}:
    get:
      responses:
       "200":
          body:
            application/json:
              example:
                appelation: Nimitz
                class: Badass Cruiser
                status: operational
    delete:
    patch:

/colony:
  /{ID}:
    get:
    delete:
    patch:
    
/pod:
  get:
  post:

  /{ID}:
    get:
    delete:
    patch:  

/player:
  description: structures needed for a player in the game (build for eventual refactoring in to generic "game" API.)
  get:
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              accountID: string
              displayname: string
              bank:
                type: object
                properties:
                  sols: number
                  loans: array
                  bonds: array
              shipRegistry: array
              colonyRegistry: array
    
  /{ID}:
    description: one specific player identified by ID
    get:
      responses:
        200:
          body:
            application/json:
                      
    patch:
      responses:
        200:
          body:
            application/json:
              example:
                responsemessage: Your item has been updated
    delete:
      responses:
        200:
          body:
            application/json:
              example:
                responsemessage: Your item has been deleted
      
/scenario:
  description: a given static configuration for game starting positions
  get:
    responses:
      200:
        body:
          application/json:
            type: object
            examples:
              output: !include examples/scenarioExample.raml
  post:
    description: with no modifiers, return a new scenario object - use parameters and inputs to customize it
    responses:
      201:
        body:
          application/json:
            type: object
            example:
              output: Your scenario has been created

  /{ID}:
    description: one specific scenario, identified by ID
    get:
    patch:
      description: update a scenario with additional details